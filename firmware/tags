!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AR	Makefile	/^AR		= msp430-ar$/;"	m
AS	Makefile	/^AS		= msp430-as$/;"	m
BASH	Makefile	/^BASH := $(shell which bash || which bash)$/;"	m
BITS_12	drivers/ads1110.h	20;"	d
BITS_14	drivers/ads1110.h	21;"	d
BITS_15	drivers/ads1110.h	22;"	d
BITS_16	drivers/ads1110.h	23;"	d
CC	Makefile	/^CC		= msp430-gcc$/;"	m
CC_CMACH	Makefile	/^CC_CMACH	= -mmcu=msp430f5510$/;"	m
CC_DMACH	Makefile	/^CC_DMACH	= -D__MSP430F5510__$/;"	m
DEBUG	Makefile	/^DEBUG := $(shell grep "^\\#define CONFIG_DEBUG" config.h)$/;"	m
ED0	drivers/ads1110.h	6;"	d
ED1	drivers/ads1110.h	7;"	d
ED2	drivers/ads1110.h	8;"	d
ED3	drivers/ads1110.h	9;"	d
ED4	drivers/ads1110.h	10;"	d
ED5	drivers/ads1110.h	11;"	d
ED6	drivers/ads1110.h	12;"	d
ED7	drivers/ads1110.h	13;"	d
FLASH_ADDR	proj.h	26;"	d
I2C_ACK	drivers/serial_bitbang.h	35;"	d
I2C_MASTER_DIR	proj.h	12;"	d
I2C_MASTER_IN	proj.h	14;"	d
I2C_MASTER_OUT	proj.h	13;"	d
I2C_MASTER_SCL	proj.h	15;"	d
I2C_MASTER_SDA	proj.h	16;"	d
I2C_MISSING_SCL_PULLUP	drivers/serial_bitbang.h	37;"	d
I2C_MISSING_SDA_PULLUP	drivers/serial_bitbang.h	38;"	d
I2C_NAK	drivers/serial_bitbang.h	36;"	d
I2C_NO_ADDR_SHIFT	drivers/serial_bitbang.h	26;"	d
I2C_OK	drivers/serial_bitbang.h	34;"	d
I2C_READ	drivers/serial_bitbang.h	24;"	d
I2C_SDA_WAIT	drivers/serial_bitbang.h	31;"	d
I2C_WRITE	drivers/serial_bitbang.h	25;"	d
LD	Makefile	/^LD		= msp430-ld$/;"	m
LDFLAGS	Makefile	/^LDFLAGS		=$/;"	m
OBJS	Makefile	/^OBJS := $(patsubst %.c,%.o,$(SRCS))$/;"	m
PGA_1	drivers/ads1110.h	16;"	d
PGA_2	drivers/ads1110.h	17;"	d
PGA_4	drivers/ads1110.h	18;"	d
PGA_8	drivers/ads1110.h	19;"	d
PROJ	Makefile	/^PROJ = proj$/;"	m
Port_1	proj.c	/^__interrupt void Port_1(void)$/;"	f
SC	drivers/ads1110.h	24;"	d
SEGMENT_B	drivers/flash.h	8;"	d
SEGMENT_C	drivers/flash.h	7;"	d
SEGMENT_D	drivers/flash.h	6;"	d
SRCS	Makefile	/^SRCS := $(wildcard *.c)$/;"	m
ST	drivers/ads1110.h	25;"	d
SUBDIRS	Makefile	/^SUBDIRS = drivers$/;"	m
SYS_MSG_P1IFG	drivers/sys_messagebus.h	/^    SYS_MSG_P1IFG = BIT1,       \/\/ button press$/;"	e	enum:sys_message
SYS_MSG_TIMER0_IFG	drivers/sys_messagebus.h	/^    SYS_MSG_TIMER0_IFG = BIT0,  \/\/ timer0 overflow$/;"	e	enum:sys_message
SYS_MSG_UART1_RX	drivers/sys_messagebus.h	/^    SYS_MSG_UART1_RX = BIT2$/;"	e	enum:sys_message
TARGET	Makefile	/^TARGET	:= DEBUG$/;"	m
TARGET	Makefile	/^TARGET	:= RELEASE$/;"	m
TIMER_A0_EVENT_CCR0	drivers/timer_a0.h	/^    TIMER_A0_EVENT_CCR0 = BIT0,$/;"	e	enum:timer_a0_event
TIMER_A0_EVENT_CCR1	drivers/timer_a0.h	/^    TIMER_A0_EVENT_CCR1 = BIT1,$/;"	e	enum:timer_a0_event
TIMER_A0_EVENT_CCR2	drivers/timer_a0.h	/^    TIMER_A0_EVENT_CCR2 = BIT2,$/;"	e	enum:timer_a0_event
TIMER_A0_EVENT_CCR3	drivers/timer_a0.h	/^    TIMER_A0_EVENT_CCR3 = BIT3,$/;"	e	enum:timer_a0_event
TIMER_A0_EVENT_CCR4	drivers/timer_a0.h	/^    TIMER_A0_EVENT_CCR4 = BIT4,$/;"	e	enum:timer_a0_event
TIMER_A0_EVENT_IFG	drivers/timer_a0.h	/^    TIMER_A0_EVENT_IFG = BIT5,$/;"	e	enum:timer_a0_event
TRIG1	proj.h	9;"	d
UART1_EV_RX	drivers/uart1.h	/^    UART1_EV_RX = BIT0,$/;"	e	enum:uart1_tevent
UART1_EV_TX	drivers/uart1.h	/^    UART1_EV_TX = BIT1$/;"	e	enum:uart1_tevent
UART1_RXBUF_SZ	drivers/uart1.h	11;"	d
USCI_A1_ISR	drivers/uart1.c	/^void USCI_A1_ISR(void)$/;"	f
VERSION	proj.h	25;"	d
_CONFIG_H_	config.h	2;"	d
__ADC_H__	drivers/adc.h	2;"	d
__FLASH_H__	drivers/flash.h	2;"	d
__PROJ_H__	proj.h	2;"	d
__SERIAL_BITBANG_	drivers/serial_bitbang.h	2;"	d
__SYS_MESSAGEBUS_H__	drivers/sys_messagebus.h	2;"	d
__TIMER_A0_H__	drivers/timer_a0.h	2;"	d
__UART1_H__	drivers/uart1.h	2;"	d
__ads1110_h_	drivers/ads1110.h	2;"	d
adc10_ISR	drivers/adc.c	/^void adc10_ISR(void)$/;"	f
adc10_halt	drivers/adc.c	/^void adc10_halt(void)$/;"	f
adc10_read	drivers/adc.c	/^void adc10_read(const uint8_t port, uint16_t * rv, const uint8_t vref)$/;"	f
adc10_rv	drivers/adc.c	/^volatile uint16_t *adc10_rv;$/;"	v
adcready	drivers/adc.c	/^volatile uint8_t adcready;$/;"	v
ads1110	drivers/ads1110.h	/^struct ads1110 {$/;"	s
ads1110_config	drivers/ads1110.c	/^uint8_t ads1110_config(const uint8_t slave_addr, const uint8_t val)$/;"	f
ads1110_convert	drivers/ads1110.c	/^void ads1110_convert(struct ads1110 *adc)$/;"	f
ads1110_read	drivers/ads1110.c	/^uint8_t ads1110_read(const uint8_t slave_addr, struct ads1110 *adc)$/;"	f
check_events	proj.c	/^void check_events(void)$/;"	f
config	drivers/ads1110.h	/^    uint8_t config;     \/\/ adc configuration register$/;"	m	struct:ads1110
conv	drivers/ads1110.h	/^    int16_t conv;       \/\/ int voltage value *10^4$/;"	m	struct:ads1110
conv_raw	drivers/ads1110.h	/^    int16_t conv_raw;   \/\/ adc raw output$/;"	m	struct:ads1110
defaults	proj.h	/^static const struct settings_t defaults = {$/;"	v	typeref:struct:settings_t
delay_c	drivers/serial_bitbang.h	41;"	d
delay_s	drivers/serial_bitbang.h	40;"	d
display_menu	proj.c	/^void display_menu(void)$/;"	f
eadc	proj.c	/^struct ads1110 eadc;$/;"	v	typeref:struct:ads1110
enable_adc	proj.h	/^    uint8_t enable_adc;         \/\/ enable internal adc for battery check$/;"	m	struct:settings_t
enable_eadc	proj.h	/^    int8_t enable_eadc;         \/\/ enable external adc. 0 false, 1 true, -1 false but ADS1110 present$/;"	m	struct:settings_t
false	proj.h	29;"	d
flash_erase	drivers/flash.c	/^uint8_t flash_erase(uint8_t *segment_addr)$/;"	f
flash_read	drivers/flash.c	/^uint8_t flash_read(uint8_t *segment_addr, void *data, const uint8_t len)$/;"	f
flash_save	drivers/flash.c	/^uint8_t flash_save(uint8_t *segment_addr, void *data, const uint8_t len)$/;"	f
fn	drivers/sys_messagebus.h	/^    void (*fn) (enum sys_message);$/;"	m	struct:sys_messagebus
i2cm_rx	drivers/serial_bitbang.c	/^uint8_t i2cm_rx(uint8_t * buf, const uint16_t length, const uint8_t options)$/;"	f
i2cm_rxfrom	drivers/serial_bitbang.c	/^uint8_t i2cm_rxfrom(const uint8_t slave_address, uint8_t * data,$/;"	f
i2cm_start	drivers/serial_bitbang.c	/^uint8_t i2cm_start(void)$/;"	f
i2cm_stop	drivers/serial_bitbang.c	/^void i2cm_stop(void)$/;"	f
i2cm_tx	drivers/serial_bitbang.c	/^uint8_t i2cm_tx(const uint8_t data, const uint8_t options)$/;"	f
i2cm_txbyte	drivers/serial_bitbang.c	/^uint8_t i2cm_txbyte(const uint8_t slave_address, const uint8_t data)$/;"	f
latch_disable	proj.h	19;"	d
latch_enable	proj.h	18;"	d
led_off	proj.h	23;"	d
led_on	proj.h	22;"	d
listens	drivers/sys_messagebus.h	/^    enum sys_message listens;$/;"	m	struct:sys_messagebus	typeref:enum:sys_messagebus::sys_message
main	proj.c	/^int main(void)$/;"	f
main_init	proj.c	/^void main_init(void)$/;"	f
messagebus	drivers/sys_messagebus.h	/^struct sys_messagebus *messagebus;$/;"	v	typeref:struct:sys_messagebus
next	drivers/sys_messagebus.h	/^    struct sys_messagebus *next;$/;"	m	struct:sys_messagebus	typeref:struct:sys_messagebus::sys_messagebus
port1_irq	proj.c	/^static void port1_irq(enum sys_message msg)$/;"	f	file:
port1_last_event	proj.c	/^volatile uint8_t port1_last_event;$/;"	v
s	proj.c	/^struct settings_t s;$/;"	v	typeref:struct:settings_t
scl_high	drivers/serial_bitbang.h	18;"	d
scl_low	drivers/serial_bitbang.h	19;"	d
sda_high	drivers/serial_bitbang.h	16;"	d
sda_low	drivers/serial_bitbang.h	17;"	d
settings_init	proj.c	/^void settings_init(void)$/;"	f
settings_t	proj.h	/^struct settings_t {$/;"	s
standby_time	proj.h	/^    uint16_t standby_time;      \/\/ number of TA0 overflows after which latch is disabled$/;"	m	struct:settings_t
standby_unused	proj.h	/^    uint16_t standby_unused;    \/\/ innactivity timeout after which latch is disabled$/;"	m	struct:settings_t
str_temp	proj.c	/^char str_temp[120];$/;"	v
str_to_uint16	proj.c	/^uint8_t str_to_uint16(char *str, uint16_t *out, const uint8_t seek, const uint8_t len, const uint16_t min, const uint16_t max)$/;"	f
sys_message	drivers/sys_messagebus.h	/^enum sys_message {$/;"	g
sys_messagebus	drivers/sys_messagebus.h	/^struct sys_messagebus {$/;"	s
sys_messagebus_register	drivers/sys_messagebus.c	/^void sys_messagebus_register(void (*callback) (enum sys_message),$/;"	f
sys_messagebus_unregister	drivers/sys_messagebus.c	/^void sys_messagebus_unregister(void (*callback) (enum sys_message))$/;"	f
timer0_A1_ISR	drivers/timer_a0.c	/^void timer0_A1_ISR(void)$/;"	f
timer_a0_delay	drivers/timer_a0.c	/^void timer_a0_delay(uint32_t microseconds)$/;"	f
timer_a0_delay_noblk	drivers/timer_a0.c	/^void timer_a0_delay_noblk(uint32_t microseconds)$/;"	f
timer_a0_event	drivers/timer_a0.h	/^enum timer_a0_event {$/;"	g
timer_a0_init	drivers/timer_a0.c	/^void timer_a0_init(void)$/;"	f
timer_a0_irq	proj.c	/^static void timer_a0_irq(enum sys_message msg)$/;"	f	file:
timer_a0_last_event	drivers/timer_a0.h	/^volatile enum timer_a0_event timer_a0_last_event;$/;"	v	typeref:enum:timer_a0_event
timer_a0_ovf	drivers/timer_a0.h	/^volatile uint16_t timer_a0_ovf;$/;"	v
true	proj.h	28;"	d
tue	proj.c	/^int16_t tue;                    \/\/ ticks until end$/;"	v
uart1_init	drivers/uart1.c	/^void uart1_init(void)$/;"	f
uart1_last_event	drivers/uart1.h	/^volatile enum uart1_tevent uart1_last_event;$/;"	v	typeref:enum:uart1_tevent
uart1_p	drivers/uart1.h	/^volatile uint8_t uart1_p;$/;"	v
uart1_rx_buf	drivers/uart1.h	/^volatile char uart1_rx_buf[UART1_RXBUF_SZ];$/;"	v
uart1_rx_enable	drivers/uart1.h	/^uint8_t uart1_rx_enable;$/;"	v
uart1_rx_err	drivers/uart1.h	/^uint8_t uart1_rx_err;$/;"	v
uart1_rx_irq	proj.c	/^static void uart1_rx_irq(enum sys_message msg)$/;"	f	file:
uart1_tevent	drivers/uart1.h	/^enum uart1_tevent {$/;"	g
uart1_tx_str	drivers/uart1.c	/^uint16_t uart1_tx_str(char *str, uint16_t size)$/;"	f
uc_disable	proj.h	21;"	d
uc_enable	proj.h	20;"	d
ver	proj.h	/^    uint8_t ver;                \/\/ firmware version$/;"	m	struct:settings_t
